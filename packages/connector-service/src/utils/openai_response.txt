// Complete TypeScript code for the tracker

```typescript
interface EventSchema {
  name: string;
  optional?: string[];
  required: string[];
}

const EVENTS: EventSchema[] = [
  {
    name: "page_view",
    optional: ["referrer", "route", "title"],
    required: ["page_url"]
  },
  {
    name: "button_click",
    optional: ["surface", "container_id", "text"],
    required: ["button_id"]
  }
];

interface EventData {
  [key: string]: any;
}

interface TrackerConfig {
  appKey: string;
  endpoint: string;
}

class AnalyticsTracker {
  private appKey: string;
  private endpoint: string;
  private eventQueue: EventData[] = [];
  private isSending: boolean = false;
  private userSession: string | null = null;

  constructor(config: TrackerConfig) {
    this.appKey = config.appKey;
    this.endpoint = config.endpoint;
    this.initUserSession();
    this.setupListeners();
  }

  private initUserSession() {
    this.userSession = localStorage.getItem('userSession') || this.generateSessionId();
    localStorage.setItem('userSession', this.userSession);
  }

  private generateSessionId(): string {
    return 'xxxx-xxxx-xxxx-xxxx'.replace(/[x]/g, () => (Math.random() * 16 | 0).toString(16));
  }

  private setupListeners() {
    window.addEventListener('hashchange', () => this.trackPageView());
    window.addEventListener('popstate', () => this.trackPageView());
    document.addEventListener('click', (event) => this.handleButtonClick(event));
  }

  private trackPageView() {
    const pageUrl = window.location.href;
    const referrer = document.referrer;
    const title = document.title;
    const route = window.location.pathname;

    this.trackEvent('page_view', { page_url: pageUrl, referrer, title, route });
  }

  private handleButtonClick(event: MouseEvent) {
    const target = event.target as HTMLElement;
    if (target.tagName === 'BUTTON') {
      const buttonId = target.id;
      const text = target.innerText;
      const containerId = target.parentElement?.id;

      this.trackEvent('button_click', { button_id: buttonId, text, container_id: containerId });
    }
  }

  private trackEvent(eventName: string, data: EventData) {
    const eventSchema = EVENTS.find(event => event.name === eventName);
    if (!eventSchema) return;

    const eventData: EventData = { app_key: this.appKey, event_name: eventName, user_session: this.userSession, ...data };

    if (this.validateEventData(eventSchema, eventData)) {
      this.eventQueue.push(eventData);
      this.sendEvents();
    }
  }

  private validateEventData(schema: EventSchema, data: EventData): boolean {
    for (const field of schema.required) {
      if (!data[field]) {
        console.error(`Missing required field: ${field}`);
        return false;
      }
    }
    return true;
  }

  private async sendEvents() {
    if (this.isSending || this.eventQueue.length === 0) return;

    this.isSending = true;
    const eventsToSend = this.eventQueue.splice(0, 10); // Batch size of 10

    try {
      const response = await fetch(this.endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'DNT': navigator.doNotTrack === '1' ? '1' : '0'
        },
        body: JSON.stringify(eventsToSend)
      });

      if (!response.ok) {
        throw new Error(`Failed to send events: ${response.statusText}`);
      }
    } catch (error) {
      console.error('Error sending events:', error);
      this.eventQueue.unshift(...eventsToSend); // Requeue failed events
    } finally {
      this.isSending = false;
      if (this.eventQueue.length > 0) {
        setTimeout(() => this.sendEvents(), 1000); // Retry after 1 second
      }
    }
  }
}

// Initialize the tracker
const tracker = new AnalyticsTracker({
  appKey: 'demo-fashion-store',
  endpoint: '/ingest/app'
});

// Auto-track initial page view
tracker.trackPageView();
```

