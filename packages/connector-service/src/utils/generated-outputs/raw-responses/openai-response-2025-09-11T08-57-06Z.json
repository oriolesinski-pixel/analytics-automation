{"success":true,"tracker":{"files":[{"path":"src/generated-0.ts","type":"tracker_core","action":"create","content":"interface EventSchema {\n  name: string;\n  optional?: string[];\n  required: string[];\n}\n\nconst EVENTS: EventSchema[] = [\n  {\n    name: \"page_view\",\n    optional: [\"referrer\", \"route\", \"title\"],\n    required: [\"page_url\"]\n  },\n  {\n    name: \"button_click\",\n    optional: [\"surface\", \"container_id\", \"text\"],\n    required: [\"button_id\"]\n  }\n];\n\ninterface EventData {\n  [key: string]: any;\n}\n\ninterface TrackerConfig {\n  appKey: string;\n  endpoint: string;\n}\n\nclass AnalyticsTracker {\n  private appKey: string;\n  private endpoint: string;\n  private eventQueue: EventData[] = [];\n  private isSending: boolean = false;\n  private userSession: string | null = null;\n\n  constructor(config: TrackerConfig) {\n    this.appKey = config.appKey;\n    this.endpoint = config.endpoint;\n    this.initUserSession();\n    this.setupListeners();\n  }\n\n  private initUserSession() {\n    this.userSession = localStorage.getItem('userSession') || this.generateSessionId();\n    localStorage.setItem('userSession', this.userSession);\n  }\n\n  private generateSessionId(): string {\n    return 'xxxx-xxxx-xxxx-xxxx'.replace(/[x]/g, () => (Math.random() * 16 | 0).toString(16));\n  }\n\n  private setupListeners() {\n    window.addEventListener('hashchange', () => this.trackPageView());\n    window.addEventListener('popstate', () => this.trackPageView());\n    document.addEventListener('click', (event) => this.handleButtonClick(event));\n  }\n\n  private trackPageView() {\n    const pageUrl = window.location.href;\n    const referrer = document.referrer;\n    const title = document.title;\n    const route = window.location.pathname;\n\n    this.trackEvent('page_view', { page_url: pageUrl, referrer, title, route });\n  }\n\n  private handleButtonClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    if (target.tagName === 'BUTTON') {\n      const buttonId = target.id;\n      const text = target.innerText;\n      const containerId = target.parentElement?.id;\n\n      this.trackEvent('button_click', { button_id: buttonId, text, container_id: containerId });\n    }\n  }\n\n  private trackEvent(eventName: string, data: EventData) {\n    const eventSchema = EVENTS.find(event => event.name === eventName);\n    if (!eventSchema) return;\n\n    const eventData: EventData = { app_key: this.appKey, event_name: eventName, user_session: this.userSession, ...data };\n\n    if (this.validateEventData(eventSchema, eventData)) {\n      this.eventQueue.push(eventData);\n      this.sendEvents();\n    }\n  }\n\n  private validateEventData(schema: EventSchema, data: EventData): boolean {\n    for (const field of schema.required) {\n      if (!data[field]) {\n        console.error(`Missing required field: ${field}`);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private async sendEvents() {\n    if (this.isSending || this.eventQueue.length === 0) return;\n\n    this.isSending = true;\n    const eventsToSend = this.eventQueue.splice(0, 10); // Batch size of 10\n\n    try {\n      const response = await fetch(this.endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'DNT': navigator.doNotTrack === '1' ? '1' : '0'\n        },\n        body: JSON.stringify(eventsToSend)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send events: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error sending events:', error);\n      this.eventQueue.unshift(...eventsToSend); // Requeue failed events\n    } finally {\n      this.isSending = false;\n      if (this.eventQueue.length > 0) {\n        setTimeout(() => this.sendEvents(), 1000); // Retry after 1 second\n      }\n    }\n  }\n}\n\n// Initialize the tracker\nconst tracker = new AnalyticsTracker({\n  appKey: 'demo-fashion-store',\n  endpoint: '/ingest/app'\n});\n\n// Auto-track initial page view\ntracker.trackPageView();\n\n// Required debug logging\nconsole.log('Analytics tracker initialized for:', config);","description":"Generated file 1"}],"app_key":"demo-fashion-store","frameworks":[],"updated_at":"2025-09-11T08:45:32.220Z","generated_at":"2025-09-10T14:10:09.264Z","implementation":"// Complete TypeScript code for the tracker\n\n```typescript\ninterface EventSchema {\n  name: string;\n  optional?: string[];\n  required: string[];\n}\n\nconst EVENTS: EventSchema[] = [\n  {\n    name: \"page_view\",\n    optional: [\"referrer\", \"route\", \"title\"],\n    required: [\"page_url\"]\n  },\n  {\n    name: \"button_click\",\n    optional: [\"surface\", \"container_id\", \"text\"],\n    required: [\"button_id\"]\n  }\n];\n\ninterface EventData {\n  [key: string]: any;\n}\n\ninterface TrackerConfig {\n  appKey: string;\n  endpoint: string;\n}\n\nclass AnalyticsTracker {\n  private appKey: string;\n  private endpoint: string;\n  private eventQueue: EventData[] = [];\n  private isSending: boolean = false;\n  private userSession: string | null = null;\n\n  constructor(config: TrackerConfig) {\n    this.appKey = config.appKey;\n    this.endpoint = config.endpoint;\n    this.initUserSession();\n    this.setupListeners();\n  }\n\n  private initUserSession() {\n    this.userSession = localStorage.getItem('userSession') || this.generateSessionId();\n    localStorage.setItem('userSession', this.userSession);\n  }\n\n  private generateSessionId(): string {\n    return 'xxxx-xxxx-xxxx-xxxx'.replace(/[x]/g, () => (Math.random() * 16 | 0).toString(16));\n  }\n\n  private setupListeners() {\n    window.addEventListener('hashchange', () => this.trackPageView());\n    window.addEventListener('popstate', () => this.trackPageView());\n    document.addEventListener('click', (event) => this.handleButtonClick(event));\n  }\n\n  private trackPageView() {\n    const pageUrl = window.location.href;\n    const referrer = document.referrer;\n    const title = document.title;\n    const route = window.location.pathname;\n\n    this.trackEvent('page_view', { page_url: pageUrl, referrer, title, route });\n  }\n\n  private handleButtonClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    if (target.tagName === 'BUTTON') {\n      const buttonId = target.id;\n      const text = target.innerText;\n      const containerId = target.parentElement?.id;\n\n      this.trackEvent('button_click', { button_id: buttonId, text, container_id: containerId });\n    }\n  }\n\n  private trackEvent(eventName: string, data: EventData) {\n    const eventSchema = EVENTS.find(event => event.name === eventName);\n    if (!eventSchema) return;\n\n    const eventData: EventData = { app_key: this.appKey, event_name: eventName, user_session: this.userSession, ...data };\n\n    if (this.validateEventData(eventSchema, eventData)) {\n      this.eventQueue.push(eventData);\n      this.sendEvents();\n    }\n  }\n\n  private validateEventData(schema: EventSchema, data: EventData): boolean {\n    for (const field of schema.required) {\n      if (!data[field]) {\n        console.error(`Missing required field: ${field}`);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private async sendEvents() {\n    if (this.isSending || this.eventQueue.length === 0) return;\n\n    this.isSending = true;\n    const eventsToSend = this.eventQueue.splice(0, 10); // Batch size of 10\n\n    try {\n      const response = await fetch(this.endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'DNT': navigator.doNotTrack === '1' ? '1' : '0'\n        },\n        body: JSON.stringify(eventsToSend)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send events: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error sending events:', error);\n      this.eventQueue.unshift(...eventsToSend); // Requeue failed events\n    } finally {\n      this.isSending = false;\n      if (this.eventQueue.length > 0) {\n        setTimeout(() => this.sendEvents(), 1000); // Retry after 1 second\n      }\n    }\n  }\n}\n\n// Initialize the tracker\nconst tracker = new AnalyticsTracker({\n  appKey: 'demo-fashion-store',\n  endpoint: '/ingest/app'\n});\n\n// Auto-track initial page view\ntracker.trackPageView();\n```\n","deployment_plan":"Step-by-step plan for integrating into the detected framework\n\n1. **Install Dependencies**: Ensure your project is set up to use TypeScript and has a build process in place.\n\n2. **Add the Tracker Code**: Copy the provided TypeScript code into a new file, e.g., `analyticsTracker.ts`.\n\n3. **Initialize the Tracker**: Import and initialize the `AnalyticsTracker` class in your main application entry point.\n\n4. **Ensure Event Listeners**: Verify that the event listeners for `hashchange`, `popstate`, and `click` are correctly set up to capture events.\n\n5. **Configure Privacy Compliance**: Ensure that your application respects user privacy settings, such as Do Not Track (DNT) and GDPR compliance.\n\n6. **Test the Integration**: Thoroughly test the tracker in a development environment to ensure all events are captured and sent correctly.\n\n7. **Deploy to Production**: Once verified, deploy the changes to your production environment.\n\n8. **Monitor and Iterate**: Continuously monitor the analytics data and iterate on the implementation as needed.","integration_guide":"Framework-specific integration instructions\n\nSince the implementation is framework-agnostic, it can be integrated into any JavaScript-based web application. However, here are some general guidelines for common frameworks:\n\n- **React**: Import the `AnalyticsTracker` in your main `App` component or a higher-order component (HOC) to ensure it initializes once. Use hooks or lifecycle methods to trigger events.\n\n- **Vue.js**: Import the tracker in your main Vue instance or a global mixin. Use Vue's lifecycle hooks to track page views and interactions.\n\n- **Angular**: Integrate the tracker in a service and inject it into your components. Use Angular's router events to track page views.\n\n- **Svelte**: Import the tracker in your main `App` component and use Svelte's lifecycle functions to manage event tracking.\n\nEnsure that the tracker is initialized early in your application's lifecycle to capture all relevant events."},"files":[{"path":"src/generated-0.ts","type":"tracker_core","action":"create","content":"interface EventSchema {\n  name: string;\n  optional?: string[];\n  required: string[];\n}\n\nconst EVENTS: EventSchema[] = [\n  {\n    name: \"page_view\",\n    optional: [\"referrer\", \"route\", \"title\"],\n    required: [\"page_url\"]\n  },\n  {\n    name: \"button_click\",\n    optional: [\"surface\", \"container_id\", \"text\"],\n    required: [\"button_id\"]\n  }\n];\n\ninterface EventData {\n  [key: string]: any;\n}\n\ninterface TrackerConfig {\n  appKey: string;\n  endpoint: string;\n}\n\nclass AnalyticsTracker {\n  private appKey: string;\n  private endpoint: string;\n  private eventQueue: EventData[] = [];\n  private isSending: boolean = false;\n  private userSession: string | null = null;\n\n  constructor(config: TrackerConfig) {\n    this.appKey = config.appKey;\n    this.endpoint = config.endpoint;\n    this.initUserSession();\n    this.setupListeners();\n  }\n\n  private initUserSession() {\n    this.userSession = localStorage.getItem('userSession') || this.generateSessionId();\n    localStorage.setItem('userSession', this.userSession);\n  }\n\n  private generateSessionId(): string {\n    return 'xxxx-xxxx-xxxx-xxxx'.replace(/[x]/g, () => (Math.random() * 16 | 0).toString(16));\n  }\n\n  private setupListeners() {\n    window.addEventListener('hashchange', () => this.trackPageView());\n    window.addEventListener('popstate', () => this.trackPageView());\n    document.addEventListener('click', (event) => this.handleButtonClick(event));\n  }\n\n  private trackPageView() {\n    const pageUrl = window.location.href;\n    const referrer = document.referrer;\n    const title = document.title;\n    const route = window.location.pathname;\n\n    this.trackEvent('page_view', { page_url: pageUrl, referrer, title, route });\n  }\n\n  private handleButtonClick(event: MouseEvent) {\n    const target = event.target as HTMLElement;\n    if (target.tagName === 'BUTTON') {\n      const buttonId = target.id;\n      const text = target.innerText;\n      const containerId = target.parentElement?.id;\n\n      this.trackEvent('button_click', { button_id: buttonId, text, container_id: containerId });\n    }\n  }\n\n  private trackEvent(eventName: string, data: EventData) {\n    const eventSchema = EVENTS.find(event => event.name === eventName);\n    if (!eventSchema) return;\n\n    const eventData: EventData = { app_key: this.appKey, event_name: eventName, user_session: this.userSession, ...data };\n\n    if (this.validateEventData(eventSchema, eventData)) {\n      this.eventQueue.push(eventData);\n      this.sendEvents();\n    }\n  }\n\n  private validateEventData(schema: EventSchema, data: EventData): boolean {\n    for (const field of schema.required) {\n      if (!data[field]) {\n        console.error(`Missing required field: ${field}`);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private async sendEvents() {\n    if (this.isSending || this.eventQueue.length === 0) return;\n\n    this.isSending = true;\n    const eventsToSend = this.eventQueue.splice(0, 10); // Batch size of 10\n\n    try {\n      const response = await fetch(this.endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'DNT': navigator.doNotTrack === '1' ? '1' : '0'\n        },\n        body: JSON.stringify(eventsToSend)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to send events: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error('Error sending events:', error);\n      this.eventQueue.unshift(...eventsToSend); // Requeue failed events\n    } finally {\n      this.isSending = false;\n      if (this.eventQueue.length > 0) {\n        setTimeout(() => this.sendEvents(), 1000); // Retry after 1 second\n      }\n    }\n  }\n}\n\n// Initialize the tracker\nconst tracker = new AnalyticsTracker({\n  appKey: 'demo-fashion-store',\n  endpoint: '/ingest/app'\n});\n\n// Auto-track initial page view\ntracker.trackPageView();\n\n// Required debug logging\nconsole.log('Analytics tracker initialized for:', config);","description":"Generated file 1"}]}